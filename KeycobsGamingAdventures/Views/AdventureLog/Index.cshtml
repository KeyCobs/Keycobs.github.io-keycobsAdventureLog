@using KeycobsGamingAdventures.Models.Entity
@model IEnumerable<AdventureLog>

@{
    ViewData["Title"] = "Game Log";
}
<br />
@if (ViewBag.TopDeaths != null && ViewBag.TopDeaths.Count >= 3)
{
    <ol class="top-deaths-list">

        <li class="top-death-item podium-2nd">
            <a asp-controller="Enemy" asp-action="Index" asp-route-EnemyId="@ViewBag.TopDeaths[1].Enemy.EnemyId" class="enemy-link">
                <img src="~/Lib/Images/@ViewBag.TopDeaths[1].Enemy.EnemyImage" alt="@ViewBag.TopDeaths[1].Enemy.Name" class="enemy-image" />
                <div class="enemy-info">
                    <strong class="enemy-name">@ViewBag.TopDeaths[1].Enemy.Name</strong>
                    <p class="death-count">💀 @ViewBag.TopDeaths[1].DeathCount deaths</p>
                </div>
            </a>
        </li>

        <li class="top-death-item podium-1st">
            <a asp-controller="Enemy" asp-action="Index" asp-route-EnemyId="@ViewBag.TopDeaths[0].Enemy.EnemyId" class="enemy-link">
                <img src="~/Lib/Images/@ViewBag.TopDeaths[0].Enemy.EnemyImage" alt="@ViewBag.TopDeaths[0].Enemy.Name" class="enemy-image" />
                <div class="enemy-info">
                    <strong class="enemy-name">@ViewBag.TopDeaths[0].Enemy.Name</strong>
                    <p class="death-count">💀 @ViewBag.TopDeaths[0].DeathCount deaths</p>
                </div>
            </a>
        </li>

        <li class="top-death-item podium-3rd">
            <a asp-controller="Enemy" asp-action="Index" asp-route-EnemyId="@ViewBag.TopDeaths[2].Enemy.EnemyId" class="enemy-link">
                <img src="~/Lib/Images/@ViewBag.TopDeaths[2].Enemy.EnemyImage" alt="@ViewBag.TopDeaths[2].Enemy.Name" class="enemy-image" />
                <div class="enemy-info">
                    <strong class="enemy-name">@ViewBag.TopDeaths[2].Enemy.Name</strong>
                    <p class="death-count">💀 @ViewBag.TopDeaths[2].DeathCount deaths</p>
                </div>
            </a>
        </li>

    </ol>
}
else
{
    <p>No data available for top deaths.</p>
}

<br />
<br />
<br />

<div class="enemy-scroll-container">
    <div class="enemy-scroll-wrapper">
        <div class="enemy-scroll-content">
            @foreach (var log in ViewBag.Enemies)
            {
                @if (log != null && !string.IsNullOrWhiteSpace(log.Name))
                {
                    <div class="enemy-item">
                        <a asp-controller="Enemy" asp-action="Index" asp-route-EnemyId="@log.EnemyId">
                            <img src="~/Lib/Images/@log.EnemyImage" alt="@log.Name" class="enemy-image" />
                            <span class="enemy-name">@log.Name</span>
                        </a>
                    </div>
                }
            }

        </div>
    </div>
</div>

<br>
<div class="search-container">
    <input type="text" id="enemySearch" placeholder="Search for enemies..." class="search-input" />
</div>

<br />
<div class="d-flex flex-wrap">
    <!-- First Table -->
    <div class="table-responsive" style="max-height: 400px; overflow-y: auto; flex: 1; margin-right: 10px;">
        <table class="table table-bordered table-hover">
            <thead class="thead-dark" style="position: sticky; top: 0; background-color: white; z-index: 1000;">
                <tr>
                    <th>Rank Number</th>
                    <th>Enemy Image</th>
                    <th>Enemy Name</th>
                    <th>Location</th>
                    <th>Region</th>
                    <th>Death Counts</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int rank = 1;
                }

                @foreach (var log in ViewBag.TopDeaths)
                {
                    <tr>
                        <td>@rank</td>
                        <td>
                            <img src="~/Lib/Images/@log.Enemy.EnemyImage"
                            alt="@log.Enemy.Name"
                            class="img-fluid rounded"
                            style="width: 50px; height: 50px; object-fit: cover;" />
                        </td>

                        <td>
                            <a asp-controller="Enemy" asp-action="Index" asp-route-EnemyId="@log.Enemy.EnemyId">
                                @(log.Enemy != null ? $"{log.Enemy.Name}" : "")
                            </a>
                        </td>
                        <td>@log.Enemy.Location.Name</td>

                        <td>
                            <a asp-controller="Location" asp-action="Region" asp-route-type="@log.Enemy.Location.Type">
                                @log.Enemy.Location.Type (@log.Enemy.Location.SubType)
                            </a>
                        </td>
                        <td>@log.DeathCount</td>
                    </tr>
                    rank++; // Increment the counter
                }

            </tbody>
        </table>
    </div>

    <!-- Second Table (Example) -->
    <div class="table-responsive" style="max-height: 400px; overflow-y: auto; flex: 1;">
        <table class="table table-bordered table-hover">
            <thead class="thead-dark" style="position: sticky; top: 0; background-color: white; z-index: 1000;">
                <tr>
                    <th>Rank Number</th>
                    <th>Location</th>
                    <th>Region</th>
                    <th>Death Counts</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int rankLoc = 1;
                }

                @foreach (var log in ViewBag.TopLocationDeaths)
                {
                    <tr>
                        <td>@rankLoc</td>
                        <td>@log.Location.Name</td>
                        <td>@log.Location.Type</td>
                        <td>@log.DeathCount</td>
                    </tr>
                    rankLoc++;
                }
            </tbody>
        </table>
    </div>
</div>


<br />


<!-- Second Table (Example) -->
<div class="table-responsive" style="max-height: 1000px; overflow-y: auto; flex: 1;">
    <table class="table table-bordered table-hover">
        <thead class="thead-dark" style="position: sticky; top: 0; background-color: white; z-index: 1000;">
            <tr>
            <th>Id</th>
            <th>Type</th>
            <th>Event</th>
            <th>Location</th>
            <th>Region</th>
            <th>Enemy Name</th>
            <th>Timestamp</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var log in Model)
        {
            <tr>
                <td>@log.LogId</td>
                <td>@log.Type</td>
                <td>@log.Event</td>
                <td>@log.Location.Name</td>
                <td>
                    <a asp-controller="Location" asp-action="Region" asp-route-type="@log.Location.Type">
                        @log.Location.Type (@log.Location.SubType)
                    </a>
                </td>
                <td>
                    <a asp-controller="Enemy" asp-action="Index" asp-route-EnemyId="@log.EnemyId">
                       @(log.Enemy != null ? $"{log.Enemy.Name}" : "")
                    </a>
                </td>
                <td>@log.TimeStamp</td>
            </tr>
        }
    </tbody>
</table>


<style>

    /* Podium Layout */
    .top-deaths-list {
        display: flex;
        justify-content: center;
        align-items: flex-end; /* Align bottom for podium effect */
        gap: 25px;
        padding: 0;
        list-style: none;
    }

    /* Top Death Item (Ensures Perfect Symmetry) */
    .top-death-item {
        display: flex;
        flex-direction: column;
        align-items: center; /* Center everything */
        text-align: center;
        width: 300px; /* Ensure uniform width */
        padding: 15px;
        position: relative;
        border-radius: 8px;
    }

    /* Enemy Image (Perfectly Centered) */
    .enemy-image {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 10px; /* Space between image and text */
    }

    /* Enemy Info (Perfect Alignment) */
    .enemy-info {
        display: flex;
        flex-direction: column;
        align-items: center; /* Center text */
        justify-content: center;
        text-align: center;
        width: 100%; /* Ensure text stays symmetrical */
    }

    /* Podium Heights (Ensuring Equal Structure) */
    .podium-1st {
        height: 180px;
        transform: scale(1.3);
    }

    .podium-2nd,
    .podium-3rd {
        height: 150px;
        transform: scale(1.15);
    }

    /* Hover Effect */
    .top-death-item:hover {
        transform: scale(1.2);
    }


    .search-container {
        margin-bottom: 10px;
        display: flex;
        justify-content: center;
    }

    .search-input {
        padding: 5px 10px;
        width: 200px;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-size: 14px;
    }

    .enemy-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 10px;
    }

    .enemy-image {
        width: 100px; /* Adjust as needed */
        height: auto;
        border-radius: 5px;
    }

    .enemy-name {
        margin-top: 5px;
        font-weight: bold;
    }

    .enemy-scroll-container {
        width: 100%;
        position: relative;
        overflow: hidden;
        white-space: nowrap;
    }

    .enemy-scroll-wrapper {
        display: flex;
        overflow-x: auto; /* Allow manual scrolling */
        scroll-behavior: smooth; /* Smooth scrolling */
        scrollbar-width: none; /* Hide scrollbar in Firefox */
        -ms-overflow-style: none; /* Hide scrollbar in IE/Edge */
    }

        .enemy-scroll-wrapper::-webkit-scrollbar {
            display: none; /* Hide scrollbar in Chrome/Safari */
        }

    .enemy-scroll-content {
        display: flex;
        gap: 20px;
        white-space: nowrap;
        width: max-content;
        animation: scrollenemies 100s linear infinite;
    }

    .enemy-name {
        font-weight: bold;
        font-size: 18px;
        padding: 5px 15px;
        background-color: #33344c;
        border-radius: 5px;
        display: inline-block;
    }

    @@keyframes scrollenemies {
        from

    {
        transform: translateX(0);
    }

    to {
        transform: translateX(-95%);
    }

    }

    

    /* Pause animation on hover or manual scroll */
    .enemy-scroll-container:hover .enemy-scroll-content {
        animation-play-state: paused;
    }

/* Table background */
.table {
    background-color: darkcyan; /* Background color of the table */
    width: 100%;
    border-collapse: collapse; /* Prevents extra space between table borders */
    color: white; /* White text color for readability */
    font-family: Arial, sans-serif; /* Sets a clean, readable font */
    font-size: 14px; /* Adjust the font size */
}

/* Table header styles */
.table th {
    background-color: #00796b; /* Darker cyan background for header */
    padding: 12px 15px; /* Adds padding for better spacing */
    text-align: left; /* Align text to the left in the header */
    font-weight: bold; /* Makes the header text bold */
}

/* Table data styles */
.table td {
    background-color: inherit; /* Inherit the background color of the table */
    padding: 10px 15px; /* Adds padding for better spacing */
    text-align: left; /* Align text to the left */
}

/* Table row hover effect */
.table tr:hover {
    background-color: #004d40; /* Darker shade of cyan on hover */
}

/* Styling links inside the table */
.table a {
    color: #ffee58; /* Yellow color for the links to make them stand out */
    text-decoration: none; /* Remove underline from links */
    font-weight: bold; /* Make links bold for emphasis */
}

.table a:hover {
    color: #ffeb3b; /* Slightly lighter yellow on hover */
    text-decoration: underline; /* Underline the link when hovered for better interaction */
}
/* Table background */
.table {
    background-color: darkcyan; /* Background color of the table */
    width: 100%;
    border-collapse: collapse; /* Prevents extra space between table borders */
    color: white; /* White text color for readability */
    font-family: Arial, sans-serif; /* Sets a clean, readable font */
    font-size: 14px; /* Adjust the font size */
}

/* Table header styles */
.table th {
    background-color: #00796b; /* Darker cyan background for header */
    padding: 12px 15px; /* Adds padding for better spacing */
    text-align: left; /* Align text to the left in the header */
    font-weight: bold; /* Makes the header text bold */
}

/* Table data styles */
.table td {
    background-color: inherit; /* Inherit the background color of the table */
    padding: 10px 15px; /* Adds padding for better spacing */
    text-align: left; /* Align text to the left */
}

/* Table row hover effect */
.table tr:hover {
    background-color: #004d40; /* Darker shade of cyan on hover */
}

/* Styling links inside the table */
.table a {
    color: #ffee58; /* Yellow color for the links to make them stand out */
    text-decoration: none; /* Remove underline from links */
    font-weight: bold; /* Make links bold for emphasis */
}

.table a:hover {
    color: #ffeb3b; /* Slightly lighter yellow on hover */
    text-decoration: underline; /* Underline the link when hovered for better interaction */
}

</style>

<script>
        document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById('enemySearch');
        const enemyItems = document.querySelectorAll('.enemy-item');

        searchInput.addEventListener('input', function () {
            const searchTerm = searchInput.value.toLowerCase();

            enemyItems.forEach(item => {
                const enemyName = item.querySelector('.enemy-name').textContent.toLowerCase();
                if (enemyName.includes(searchTerm)) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
        });
    });

    document.addEventListener("DOMContentLoaded", function () {
        let scrollWrapper = document.querySelector('.enemy-scroll-wrapper');
        let scrollContent = document.querySelector('.enemy-scroll-content');

        if (!scrollWrapper || !scrollContent) {
            console.error("Error: Enemy scroll elements not found.");
            return;
        }

        function duplicateContent() {
            let originalItems = Array.from(scrollContent.children);

            // Duplicate content until it's long enough for seamless looping
            while (scrollContent.scrollWidth < window.innerWidth * 2) {
                originalItems.forEach(item => {
                    let clone = item.cloneNode(true);
                    scrollContent.appendChild(clone);
                });
            }
        }

        duplicateContent(); // Ensure seamless looping

        // Stop animation when manually scrolling
        let isScrolling;
        scrollWrapper.addEventListener("scroll", function () {
            clearTimeout(isScrolling);
            scrollContent.style.animation = "none"; // Pause animation

            isScrolling = setTimeout(() => {
                scrollContent.style.animation = "scrollenemies 50s linear infinite"; // Resume animation
            }, 2000); // Restart after 2 seconds of inactivity
        });

        // Allow scrolling with mouse wheel
        scrollWrapper.addEventListener("wheel", function (event) {
            event.preventDefault();
            scrollWrapper.scrollLeft += event.deltaY * 2; // Adjust speed
        });
    });

</script>
